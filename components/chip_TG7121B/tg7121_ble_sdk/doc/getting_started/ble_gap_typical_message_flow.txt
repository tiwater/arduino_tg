title BLE GAP TYPICAL MESSAGE FLOW
participant Slave App
participant Slave Stack
participant Master Stack
participant Master App

note over Master App,Master Stack,Slave Stack,Slave App: DEVICE INITIALIZED

Slave App->+Slave Stack: dev_manager_create_legacy_adv_object
Slave Stack-->-Slave App: dev event: ADV_OBJ_CREATED
Slave App->+Slave Stack: dev_manager_start_adv

opt SCAN
    Master App->+Master Stack: dev_manager_create_scan_object
    Master Stack-->-Master App: dev event: SCAN_OBJ_CREATED
    Master App->+Master Stack: dev_manager_start_scan
    loop several times
        Master Stack-->Master App: dev event: ADV_REPORT
    end
    opt STOP SCAN MANUALLY
        Master App->Master Stack: dev_manager_stop_scan
    end
    Master Stack-->-Master App: dev event: SCAN_STOPPED
end

Master App->+Master Stack: dev_manager_create_init_object
Master Stack-->-Master App: dev event: INIT_OBJ_CREATED
Master App->+Master Stack: dev_manager_start_init


Master Stack->Slave Stack: CONNECT REQUEST
note over Master App,Master Stack,Slave Stack,Slave App: CONNECTION ESTABLISHED
Master Stack-->-Master App: dev event: INIT_STOPPED
Slave Stack-->-Slave App: dev event: ADV_STOPPED
Master Stack-->Master App: gap event: CONNECTED
Slave Stack-->Slave App: gap event: CONNECTED


opt BOND PROCEDURE
    opt SLAVE INITIAE SECURITY PROCEDURE
        Slave App->Slave Stack: gap_manager_slave_security_req
        Slave Stack->Master Stack: SECURITY REQUEST
        Master Stack-->Master App: gap event: SLAVE_SECURITY_REQ
    end
    Master App->Master Stack: gap_manager_master_bond
    Master Stack->Slave Stack: PAIR REQUEST
    Slave Stack-->Slave App: gap event: MASTER_PAIR_REQ
    Slave App->Slave Stack: gap_manager_slave_pair_response_send
    Slave Stack->Master Stack: PAIR RESPONSE
    alt Just Works

    else Passkey Entry: responder displays, initiator inputs
        Slave Stack-->Slave App: gap event: DISPLAY_PASSKEY
        Master Stack-->+Master App: gap event: REQUEST_PASSKEY
        Master App->-Master Stack: gap_manager_passkey_input
    else Passkey Entry: initiator displays, responder inputs
        Master Stack-->Master App: gap event: DISPLAY_PASSKEY
        Slave Stack-->+Slave App: gap event: REQUEST_PASSKEY
        Slave App->-Slave Stack: gap_manager_passkey_intput
    else Passkey Entry: initiator and responder inputs
        Slave Stack-->+Slave App: gap event: REQUEST_PASSKEY
        Master Stack-->+Master App: gap event: REQUEST_PASSKEY
        Slave App->-Slave Stack: gap_manager_passkey_intput
        Master App->-Master Stack: gap_manager_passkey_input
    else Numeric Comparison
        Slave Stack-->+Slave App: gap event: NUMERIC_COMPARE
        Master Stack-->+Master App: gap event: NUMERIC_COMPARE
        Slave App->-Slave Stack: gap_manager_numeric_compare_set
        Master App->-Master Stack: gap_manager_numeric_compare_set
    else OOB(Legacy)

    else OOB(Secure Connection)
        
    end
    note over Master Stack,Slave Stack: Authentication and Encryption
    Slave Stack-->Slave App: gap event: PAIR_DONE
    Master Stack-->Master App: gap event: PAIR_DONE
end
Master App->Master Stack: gap_manager_disconnect
Master Stack->Slave Stack: DISCONNECT
note over Master App,Master Stack,Slave Stack,Slave App: DISCONNECTION
Master Stack-->Master App: gap event: DISCONNECTED
Slave Stack-->Slave App: gap event: DISCONNECTED

Slave App->+Slave Stack: dev_manager_start_adv
Master App->+Master Stack: dev_manager_start_init
Master Stack->Slave Stack: CONNECT REQUEST
note over Master App,Master Stack,Slave Stack,Slave App: CONNECTION ESTABLISHED
Master Stack-->-Master App: dev event: INIT_STOPPED
Slave Stack-->-Slave App: dev event: ADV_STOPPED
Master Stack-->Master App: gap event: CONNECTED
Slave Stack-->Slave App: gap event: CONNECTED

opt ENCRYPT PROCEDURE
    opt SLAVE INITIAE SECURITY PROCEDURE
        Slave App->Slave Stack: gap_manager_slave_security_req
        Slave Stack->Master Stack: SECURITY REQUEST
        Master Stack-->Master App: gap event: SLAVE_SECURITY_REQ
    end
    Master App->Master Stack: gap_manager_master_encrypt
    Master Stack->Slave Stack: ENCRYPTION REQUEST
    Slave Stack->Master Stack: ENCRYPTION RESPONSE
    Master Stack->Slave Stack: START ENCRYPTION REQUEST
    Slave Stack->Master Stack: START ENCRYPTION RESPONSE
    
    Slave Stack-->Slave App: gap event: ENCRYPT_DONE
    Master Stack-->Master App: gap event: ENCRYPT_DONE
end

Master App->Master Stack: gap_manager_disconnect
Master Stack->Slave Stack: DISCONNECT
note over Master App,Master Stack,Slave Stack,Slave App: DISCONNECTION
Master Stack-->Master App: gap event: DISCONNECTED
Slave Stack-->Slave App: gap event: DISCONNECTED