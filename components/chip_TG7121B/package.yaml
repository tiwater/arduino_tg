
## 第一部分： 基础信息
name: chip_TG7121B                                     # <必选项> 包名称 （符合C语言变量命名规则），长度少于等于64字节
version: v7.4.6                                     # <必选项> 组件版本号
description: Chip CSI driver SDK.                   # <必选项> 建议至少20字以上
type: chip                                          # <必选项> 组件类型，为：solution, chip, board, common, sdk

tag: 核心模块                                       # <可选项> 组件分类，缺省值： ''
keywords:                                           # <可选项> 标签，会影响到组件被搜索的效果，合理的标签很重要
  - chip
license: Apache license v2.0                        # <可选项> 源代码的许可证，要确保所有代码、文件的许可证不冲突。如：MIT，Apache license v2.0，BSD

## 第二部分：依赖信息
#           指定该组件依赖的组件及版本，版本支持条件比较，支持：>=v1.0, >v1.0, ==v1.0, <=v1.0, <v1.0, v1.0
#           未指定条件时，默认为 ==，如 v1.0 与 ==v1.0
# depends:                                 # <可选项> 该组件依赖其他的组件，合理的依赖才能保证组件能编译、使用
#   - minilibc: v7.2.0
#   - aos: >=v7.2.0
depends:
  - csi: v7.4.3

## 第三部分：板级信息
# hw_info:                                 # 对 solution、board、chip 三个字段的改进，统称为 hw_info 字段
#   cpu_id: cpu0
#   cpu_name: CK804EF
#   vendor_name: t-head
#   chip_name: chip_pangu                  # <可选项> 指定芯片组件名,未设置时，使用depends中 chip 第一个组件
#   board_name: pangu_cpu0                 # <可选项> 指定开发板组件名，未设置时，使用depends中 board 第一个组件
#   ld_script: configs/gcc_eflash.ld       # <可选项> 连接时使用 LD 脚本，当选把未设置时，使用对应的 board 的 LD 脚本
#   flash_program: bin/flash_program.elf   # <可选项> 芯片全局烧写程序
#   toolchain_prefix: csky-abiv2-elf       # <可选项> 编译器前缀
#   cpu0:
#     cpu_name: CK804EF                    # <必选项> 该芯片使用的 CPU 型号
#     ld_script: configs/gcc_eflash.ld     # <必选项> 连接时使用 LD 脚本
#     flash_program: bin/flash_program.elf # <可选项> 该CPU对应烧写程序，未指定时使用全局烧写程序
#     toolchain_prefix: csky-abiv2-elf     # <可选项> 编译器前缀
#   cpu1:
#     cpu_name: CK804EF                    # <必选项> 该芯片使用的 CPU 型号
#     ld_script: configs/gcc_eflash.ld     # <可选项> 连接时使用 LD 脚本
#     flash_program: bin/flash_program.elf # <可选项> 该CPU对应烧写程序，未指定时使用全局烧写程序
#     toolchain_prefix: csky-abiv2-elf     # <可选项> 编译器前缀

## solution component
# hw_info:
#   cpu_id: cpu0
#   board_name: pangu_cpu0
#   cpu_name: CK805EF
#   vendor_name: thead
#   chip_name: 'chip_pangu'
#   ld_script: configs/gcc_eflash.ld.S

## board component
# hw_info:
#   chip_name: chip_pangu
#   ld_script: configs/gcc_eflash.ld

## chip component (单处理器)
# hw_info:
#   cpu_name: CK804EF
#   ld_script: configs/gcc_eflash.ld
#   toolchain_prefix: csky-abiv2-elf
#   flash_program: bin/flash_program.elf

## chip component(多处理器)
# hw_info:
#   cpu0:
#     cpu_name: CK804EF                    # <必选项> 该芯片使用的 CPU 型号
#     ld_script: configs/gcc_eflash.ld     # <必选项> 连接时使用 LD 脚本
#     flash_program: bin/flash_program.elf # <可选项> 该CPU对应烧写程序，未指定时使用全局烧写程序
#     toolchain_prefix: csky-abiv2-elf     # <可选项> 编译器前缀
#   cpu1:
#     cpu_name: CK804EF                    # <必选项> 该芯片使用的 CPU 型号
#     ld_script: configs/gcc_eflash.ld     # <必选项> 连接时使用 LD 脚本
#     flash_program: bin/flash_program.elf # <可选项> 该CPU对应烧写程序，未指定时使用全局烧写程序
#     toolchain_prefix: csky-abiv2-elf     # <可选项> 编译器前缀
hw_info:
  vendor_name: dummy
  cpu_name: cortex-m0
  arch_name: arm
  ld_script: configs/gcc_eflash.ld
  flash_program: bin/flash_program.elf
  toolchain_prefix: arm-none-eabi

## 第四部分：编译连接信息
# build_config:                            # <可选项> 编译配置项
#   include:                               # <可选项> 编译时，影响编译器的-I 参数 ,全局有效
#     - src                                #        include 只能是该软件包下的目录，不能使用外部目录
#   internal_include:                      # <可选项> 编译时，影响编译器的-I 参数 ,组件内有效
#     - include
#   cflag: ''                              # <可选项> C 编译器所需要要的编译参数
#   cxxflag: ''                            # <可选项> CXX 编译器所需要要的编译参数
#   asmflag: ''                            # <可选项> 汇编器所需要要参数
#   define:                                # <可选项> 宏定义, 增加编译器的-D 选项,如：
#     XXX: 1                               #   -DXXX=1
#     AAA: 1                               #   -DAAA
#     STR: "abc"                           #   -DSTR="abc"
#   libs:                                  # 该组件中支持的二进制静态库,如：libxxx.a, libyyy.a
#     - xxx                                #   -lxxx
#     - yyy                                #   -lyyy
#   libpath:                               # 指定静态库所在的路径（相对于该组件路径）
#     - libs                               #   -Llibs
build_config:
  ldflag: -Wl,--no-wchar-size-warning -Wl,--no-enum-size-warning -Wl,-Map=yoc.map
  define:
    - CONFIG_AOS=1
    - LOG_BACKEND=0
    - LE501X
  include:
    - include
    - tg7121_ble_sdk/dev/soc/arm_cm/tg7121/integration
    - tg7121_ble_sdk/dev/soc/arm_cm/tg7121/
    - tg7121_ble_sdk/dev/soc/arm_cm/cmsis
    - tg7121_ble_sdk/dev/soc/arm_cm/
    - tg7121_ble_sdk/dev/soc/
    - tg7121_ble_sdk/dev/module/debug/RTT
    - tg7121_ble_sdk/dev/module/tinyfs
    - tg7121_ble_sdk/dev/module/crc
    - tg7121_ble_sdk/dev/module/ble
    - tg7121_ble_sdk/dev/module/ble/prf
    - tg7121_ble_sdk/dev/module/debug
    - tg7121_ble_sdk/dev/module/static_buffer
    - tg7121_ble_sdk/dev/module/common
    - tg7121_ble_sdk/dev/peripheral/ecc
    - tg7121_ble_sdk/dev/peripheral/api
    - tg7121_ble_sdk/dev/peripheral/inc
    - tg7121_ble_sdk/dev
  libs:
    - ll_fw_legacy
  libpath:
    - tg7121_ble_sdk/dev/soc/arm_cm/tg7121/bin
#[genie begin]add by lgy for build warning
  ldflag: -Wl,--no-wchar-size-warning,-Map=yoc.map
#[genie end]add by lgy

# source_file:                             # <可选项> 指定参与编译的源代码文件，支持通配符，采用相对路径
#   - src/*.c                              # 例：组件 src 目录下所有的扩展名为 c 的源代码文件
source_file:
  - "startup.S"
  - "startup_c.c"
  - "tg7121_ble_sdk/dev/soc/arm_cm/tg7121/compiler/gnu/delay_asm.S"
  - "tg7121_ble_sdk/dev/soc/arm_cm/tg7121/compiler/gnu/sleep_asm.S"
  - "tg7121_ble_sdk/dev/soc/arm_cm/tg7121/compiler/gnu/svcall_asm.S"
  - "tg7121_ble_sdk/dev/soc/arm_cm/tg7121/integration/calc_acc.c"
  - "tg7121_ble_sdk/dev/soc/arm_cm/tg7121/integration/io_config.c"
  - "tg7121_ble_sdk/dev/soc/arm_cm/tg7121/integration/lscache_msp.c"
  - "tg7121_ble_sdk/dev/soc/arm_cm/tg7121/integration/lsqspi_msp.c"
  - "tg7121_ble_sdk/dev/soc/arm_cm/tg7121/integration/modem_rf_le501x.c"
  - "tg7121_ble_sdk/dev/soc/arm_cm/tg7121/integration/trng_msp.c"
  - "tg7121_ble_sdk/dev/soc/arm_cm/tg7121/integration/uart_msp.c"
  - "tg7121_ble_sdk/dev/soc/arm_cm/tg7121/integration/spi_msp.c"
  - "tg7121_ble_sdk/dev/soc/arm_cm/tg7121/integration/lstimer_msp.c"
  - "tg7121_ble_sdk/dev/soc/arm_cm/tg7121/integration/i2c_msp.c"
  - "tg7121_ble_sdk/dev/soc/arm_cm/tg7121/integration/adc_msp.c"
  - "tg7121_ble_sdk/dev/soc/arm_cm/tg7121/integration/lspis_msp.c"
  - "tg7121_ble_sdk/dev/soc/arm_cm/tg7121/cpu.c"
  - "tg7121_ble_sdk/dev/soc/arm_cm/tg7121/platform.c"
  - "tg7121_ble_sdk/dev/soc/arm_cm/tg7121/sleep.c"
  - "tg7121_ble_sdk/dev/soc/arm_cm/tg7121/stack_var.c"
  - "tg7121_ble_sdk/dev/soc/arm_cm/tg7121/sys_stat.c"
  - "tg7121_ble_sdk/dev/soc/flash_svcall.c"
  - "tg7121_ble_sdk/dev/soc/arm_cm/svcall.c"
  - "tg7121_ble_sdk/dev/soc/arm_cm/systick.c"
  - "tg7121_ble_sdk/dev/module/common/common.c"
  - "tg7121_ble_sdk/dev/module/debug/log.c"
  - "tg7121_ble_sdk/dev/module/debug/ls_dbg.c"
  - "tg7121_ble_sdk/dev/module/debug/arm_cm/gnu/ls_dbg_asm.S"
  - "tg7121_ble_sdk/dev/module/static_buffer/linked_buffer.c"
  - "tg7121_ble_sdk/dev/module/crc/crc16.c"
  - "tg7121_ble_sdk/dev/peripheral/src/calc_div.c"
  - "tg7121_ble_sdk/dev/peripheral/src/lstrng.c" 
  - "tg7121_ble_sdk/dev/peripheral/src/lsqspi.c"
  - "tg7121_ble_sdk/dev/peripheral/src/spi_flash.c" 
  - "tg7121_ble_sdk/dev/peripheral/src/spi_flash_lsqspi.c"
  - "tg7121_ble_sdk/dev/peripheral/src/lsrtc.c"
  - "tg7121_ble_sdk/dev/peripheral/src/lspis.c"
  - "tg7121_ble_sdk/dev/peripheral/ecc/lsecc.c"
  - "trap_c.c"
  - "system.c"
  - "low_power_mode.c"
  - "hci_adapter.c"
  - "drivers/csi2_uart.c"
  - "drivers/csi2_spiflash.c"
  - "drivers/csi2_timer.c"
  - "drivers/csi2_pwm.c"
  - "drivers/csi2_iic.c"
  - "drivers/csi2_spi.c"
  - "drivers/csi2_gpio_pin.c"
  - "drivers/csi2_adc.c"
  - "pinmux.c"
  - "drivers/dut_hal.c"

def_config:                              # 组件的可配置项
  CONFIG_CSI_V2: 1
  CONFIG_CSI: "csi2"
  CONFIG_SYSTICK_HZ: 1000

## 第五部分：配置信息
# def_config:                              # 组件的可配置项
#   CONFIG_DEBUG: y
#   CONFIG_PARAM_NOT_CHECK: y
#   CONFIG_CLI: y

## 第六部分：安装信息
# install:
#   - dest: include/                       # 安装的目的路径 dest是相对路径，通常是相对于YoC SDK 安装目录
#     source:                              # 安装源列表
#      - src/*.h                           # 支持通配符，相对路径
install:
  - dest: "include"
    source:
      - "include/*.h"
## 第七部分：导出部分
# export:
#   - dest: "<SOLUTION_PATH>/generated/data" # 安装的目的路径 dest是相对路径
#     source:                                # 安装源列表
#       - "bootimgs/boot"
#       - "bootimgs/tee"
#       - "bootimgs/mtb"
#       - "configs/config.yaml"
